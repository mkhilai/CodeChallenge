# Generated by Django 2.1.3 on 2018-11-03 19:18

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Users',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('userID', models.AutoField(db_column='userID', primary_key=True, serialize=False)),
                ('email', models.EmailField(db_column='email', db_index=True, max_length=64, unique=True)),
                ('password', models.CharField(db_column='password', max_length=16)),
                ('name', models.CharField(db_column='name', max_length=64, null=True)),
            ],
            options={
                'db_table': 'Users',
                'ordering': ['userID'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Companies',
            fields=[
                ('companyID', models.AutoField(db_column='companyID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='name', max_length=200)),
                ('email', models.EmailField(db_column='email', db_index=True, max_length=64, unique=True)),
                ('phone', models.CharField(db_column='phone', max_length=16, unique=True)),
                ('country', models.CharField(db_column='country', max_length=64, null=True)),
                ('city', models.CharField(db_column='city', max_length=64, null=True)),
                ('streetAddress', models.CharField(db_column='street', max_length=124, null=True)),
            ],
            options={
                'db_table': 'Companies',
                'ordering': ['companyID'],
            },
        ),
        migrations.AddField(
            model_name='users',
            name='companyID',
            field=models.ForeignKey(db_column='companyID', null=True, on_delete=django.db.models.deletion.PROTECT, to='api.Companies'),
        ),
        migrations.AddField(
            model_name='users',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='users',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
